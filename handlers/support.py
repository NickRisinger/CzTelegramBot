from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from config.config import Config
from database.database import create_tread, get_tread
from keyboards.start import main_menu_keyboard
from keyboards.support import support_done_keyboard
from middlewares.auth import AuthMiddleware

router = Router()
router.message.middleware(AuthMiddleware())


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class SupportState(StatesGroup):
    set_subject = State()
    in_support = State()


# --- –ö–Ω–æ–ø–∫–∞ '–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π' ---
@router.message(F.text == '–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π')
async def support_start(message: Message, state: FSMContext):
    await state.set_state(SupportState.set_subject)

    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è, —á—Ç–æ–± –º—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤–∞–º –ø–æ–º–æ—á—å.', reply_markup=None)


@router.message(SupportState.set_subject)
async def handle_topic_input(message: Message, bot: Bot, state: FSMContext):
    topic_title = message.text
    user = message.from_user

    topic = await bot.create_forum_topic(
        chat_id=Config.BOT_SUPPORT_GROUP_ID,
        name=topic_title
    )
    thread_id = topic.message_thread_id

    await create_tread(user.id, thread_id)

    await state.set_state(SupportState.in_support)
    await state.update_data(thread_id=thread_id)

    await bot.send_message(
        chat_id=Config.BOT_SUPPORT_GROUP_ID,
        message_thread_id=thread_id,
        text=(f'üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username or user.full_name} (ID: {user.id})\n'
              f'–¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {topic_title}')
    )

    await message.answer(
        '–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n\n'
        '–ö–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Ä–µ—à—ë–Ω, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.',
        reply_markup=support_done_keyboard()
    )


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
@router.message(F.text == '‚úÖ –í–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω')
async def end_support(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    thread_id = data['thread_id']

    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–æ–ø–∏–∫
    # await bot.close_forum_topic(chat_id=Config.BOT_SUPPORT_GROUP_ID, message_thread_id=thread_id)
    await bot.delete_forum_topic(chat_id=Config.BOT_SUPPORT_GROUP_ID, message_thread_id=thread_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚úÖ', reply_markup=main_menu_keyboard())


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
@router.message(SupportState.in_support)
async def user_message_to_support(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    thread_id = data['thread_id']

    if message.document:
        await bot.send_document(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            document=message.document.file_id,
            caption=message.caption,
            message_thread_id=thread_id,
        )

    elif message.photo:
        await bot.send_photo(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            photo=message.photo[-1].file_id,
            caption=message.caption,
            message_thread_id=thread_id,
        )

    elif message.video:
        await bot.send_video(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            video=message.video.file_id,
            caption=message.caption,
            message_thread_id=thread_id,
        )

    elif message.voice:
        await bot.send_voice(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            voice=message.voice.file_id,
            caption=message.caption,
            message_thread_id=thread_id,
        )

    elif message.audio:
        await bot.send_audio(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            audio=message.audio.file_id,
            caption=message.caption,
            message_thread_id=thread_id,
        )

    elif message.text:
        await bot.send_message(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            message_thread_id=thread_id,
            text=f'üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.full_name}:\n\n{message.text}'
        )


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
@router.message(F.is_topic_message)
async def support_reply_to_user(message: Message, bot: Bot):
    if message.from_user.is_bot:
        return

    thread_id = message.message_thread_id
    thread = await get_tread(thread_id)

    if message.document:
        await bot.send_document(
            chat_id=thread.user_tg_id,
            document=message.document.file_id,
            caption=message.caption,
        )

    elif message.photo:
        await bot.send_photo(
            chat_id=thread.user_tg_id,
            photo=message.photo[-1].file_id,
            caption=message.caption,
        )

    elif message.video:
        await bot.send_video(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            video=message.video.file_id,
            caption=message.caption,
        )

    elif message.voice:
        await bot.send_voice(
            chat_id=Config.BOT_SUPPORT_GROUP_ID,
            voice=message.voice.file_id,
            caption=message.caption,
        )

    elif message.audio:
        await bot.send_audio(
            chat_id=thread.user_tg_id,
            audio=message.audio.file_id,
            caption=message.caption,
        )

    elif message.text:
        await bot.send_message(
            chat_id=thread.user_tg_id,
            text=f'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n{message.text}'
        )


# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
@router.callback_query(SupportState.in_support)
async def block_other_buttons(callback: CallbackQuery):
    await callback.answer('–°–µ–π—á–∞—Å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.', show_alert=True)
